from git import Repo
import json
import os


def clone_git_from_json(project_path, repo_url):
    try:
        Repo.clone_from(repo_url, project_path)
    except:
        print(f"{repo_url} already exists")

def get_obfuscations():
    obfuscation_arr = []
    for obfuscation_file in os.listdir("./Obfuscations"):
        if not obfuscation_file.endswith(".py"):
            continue
        file_name = obfuscation_file[:-3]
        if obfuscation_file.startswith("__") or file_name == "Obfuscation":
            continue

        obfuscation_arr.append(file_name)
    return obfuscation_arr


def generate_settings():
    obfuscations = get_obfuscations()
    if not os.path.exists("settings.json"):
        with open("settings.json", "w") as f:
            json.dump([], f)

    with open("settings.json", "r") as file:
        data = json.load(file)
        cur_dir = "examples"

        for folder in os.listdir("./examples"):
            path = os.path.join(cur_dir, folder)
            # No obfuscation
            new_project = {
                "project_folder": path,
                "obfuscations": []
            }
            data.append(new_project)
            for obfuscation in obfuscations:
                new_project = {
                    "project_folder": path,
                    "obfuscations": [obfuscation]
                }
                data.append(new_project)
                # Append last where all methods are appended
            new_project = {
                "project_folder": path,
                "obfuscations": ["DeadCode", "VarSub", "ConstSub", "Encrypt", "Encode"]
            }
            new_project2 = {
                "project_folder": path,
                "obfuscations": ["DeadCode", "VarSub", "ConstSub", "Encode"]
            }
            data.append(new_project)
            data.append(new_project2)
    with open("settings.json", "w") as file:
        json.dump(data, file, indent=4)


if __name__ == "__main__":
    if not os.path.exists("./examples"):
        os.makedirs("./examples")

    local_path = os.path.join(os.getcwd(), "examples")
    with open("malware.json", "rb") as f:
        mal = json.load(f)
    for malware in mal:
        name = malware['name']
        repo_url = malware['git_url']
        type = malware['type']
        specific_path = os.path.join(local_path, f"./{name}")
        clone_git_from_json(specific_path, repo_url)
    generate_settings()
